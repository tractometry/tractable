[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement richiehalford@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 tractable authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Adam Richie-Halford. Author. Kelly Chang. Author, maintainer. Teresa Gomez. Author. McKenzie Hagen. Author. Ethan Roy. Author. Ariel Rokem. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Richie-Halford , Chang K, Gomez T, Hagen M, Roy E, Rokem (2025). tractable: Analyzing diffusion MRI tract profiles. R package version 0.3.0, https://github.com/tractometry/tractable.","code":"@Manual{,   title = {tractable: Analyzing diffusion MRI tract profiles},   author = {Adam Richie-Halford and Kelly Chang and Teresa Gomez and McKenzie Hagen and Ethan Roy and Ariel Rokem},   year = {2025},   note = {R package version 0.3.0},   url = {https://github.com/tractometry/tractable}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Analyzing diffusion MRI tract profiles","text":"tractable contains functions analyze diffusion MRI (dMRI) tract profiles using generalized additive models. operates outputs AFQ software ecosystem tests differences two phenotypic groups along length specified white matter tract.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analyzing diffusion MRI tract profiles","text":"can install development version tractable GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"tractometry/tractable\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Analyzing diffusion MRI tract profiles","text":"basic example shows solve common problem:","code":"library(tractable) ## basic example code"},{"path":"/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Analyzing diffusion MRI tract profiles","text":"Please note tractable project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"/reference/bootstrap_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap an AFQ dataframe — bootstrap_df","title":"Bootstrap an AFQ dataframe — bootstrap_df","text":"function bootstrap samples AFQ dataframe participant. , first pivots wide format one row per participant, bootstrap samples, finally pivots back long format.","code":""},{"path":"/reference/bootstrap_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap an AFQ dataframe — bootstrap_df","text":"","code":"bootstrap_df(   df,   target,   node_col = \"nodeID\",   node_group = \"group\",   participant_col = \"subjectID\" )"},{"path":"/reference/bootstrap_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap an AFQ dataframe — bootstrap_df","text":"df input dataframe. target column name encodes metric model. node_col column name encodes tract node positions. Default: \"nodeID\" node_group column name group tract node smooth . Default: NULL. participant_col column name encodes participant ID. Default: \"subjectID\".","code":""},{"path":"/reference/bootstrap_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap an AFQ dataframe — bootstrap_df","text":"shuffled AFQ dataframe","code":""},{"path":"/reference/bootstrap_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap an AFQ dataframe — bootstrap_df","text":"","code":"if (FALSE) { # \\dontrun{ df_afq <- read.csv(\"/path/to/afq/output.csv\") df_bootstrap <- bootstrap_df(df_afq, \"dti_fa\")} # }"},{"path":"/reference/build_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a GAM formula. — build_formula","title":"Build a GAM formula. — build_formula","text":"Function used build generic GAM formula string given arguments. function automatically includes tract node smoothing term (without grouping term) participant random effects (random intercept). regressor terms included additive effects.","code":""},{"path":"/reference/build_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a GAM formula. — build_formula","text":"","code":"build_formula(   target,   regressors = NULL,   node_col = \"nodeID\",   node_k = NULL,   node_group = NULL,   participant_col = \"subjectID\" )"},{"path":"/reference/build_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a GAM formula. — build_formula","text":"target column name encodes metric model. regressors Column name list column names use regressors, including node smoothing terms participant effects. list can also include smoothing terms. Default: NULL. node_col column name encodes tract node positions. Default: \"nodeID\". node_k basis dimensions used represent node smoother. node_group, basis value applied group well. Default: NULL node_group column name group tract node smooth . Default: NULL. participant_col column name encodes participant ID. Default: \"subjectID\".","code":""},{"path":"/reference/build_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a GAM formula. — build_formula","text":"GAM formula.","code":""},{"path":"/reference/build_formula.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build a GAM formula. — build_formula","text":"formula build logic:   <variables> indicating optional components.","code":"target ~ regressors   + s(node_col, <by = node_group>, <k = node_k>)   + s(participant_col, bs = \"re\")"},{"path":"/reference/build_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a GAM formula. — build_formula","text":"","code":"formula <- build_formula(target = \"dti_fa\", node_k = 40)  formula <- build_formula(   target     = \"dki_md\",   regressors = c(\"group\", \"sex\"),    node_k     = 32,    node_group = \"group\" )"},{"path":"/reference/estimate_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate distribution function from values. — estimate_distribution","title":"Estimate distribution function from values. — estimate_distribution","text":"Estimate distribution function values.","code":""},{"path":"/reference/estimate_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate distribution function from values. — estimate_distribution","text":"","code":"estimate_distribution(   x,   distr_options = c(\"beta\", \"gamma\", \"gaussian\"),   eval_metric = \"aic\" )"},{"path":"/reference/estimate_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate distribution function from values. — estimate_distribution","text":"x numeric vector evaluated. distr_options vector distribution names evaluate values.  Possible options: (\"beta\", \"gamma\", \"gaussian\")  Default: c(\"beta\", \"gamma\", \"gaussian\") eval_metric distribution evaluation metric names.  Possible options: (\"aic\", \"bic\", \"loglik\")  Default: \"aic\"","code":""},{"path":"/reference/estimate_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate distribution function from values. — estimate_distribution","text":"estimated family extended.family function.","code":""},{"path":[]},{"path":"/reference/estimate_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate distribution function from values. — estimate_distribution","text":"","code":"x <- rnorm(1000) estimate_distribution(x) #>  #> Family: gaussian  #> Link function: identity  #>   x <- rgamma(1000, shape = 12) estimate_distribution(x) #>  #> Family: Gamma  #> Link function: logit  #>"},{"path":"/reference/estimate_smooth_basis.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate smoothing basis dimensions for GAM smoothers. — estimate_smooth_basis","title":"Estimate smoothing basis dimensions for GAM smoothers. — estimate_smooth_basis","text":"Function used estimate smoothing basis, k, smooth term.","code":""},{"path":"/reference/estimate_smooth_basis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate smoothing basis dimensions for GAM smoothers. — estimate_smooth_basis","text":"","code":"# Default S3 method estimate_smooth_basis(   target,   smooth_terms,   df,   regressors = NULL,   k_values = 1:50,   bs = \"tp\",   kindex_thr = 0.95,   pvalue_thr = 0.05,   family = \"auto\",   method = \"fREML\",   discrete = TRUE,   ... )  # S3 method for class 'formula' estimate_smooth_basis(   formula,   df,   k_values = 1:50,   bs = \"tp\",   kindex_thr = 0.95,   pvalue_thr = 0.05,   family = \"auto\",   method = \"fREML\",   discrete = TRUE,   ... )"},{"path":"/reference/estimate_smooth_basis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate smoothing basis dimensions for GAM smoothers. — estimate_smooth_basis","text":"target column name encodes metric model. smooth_terms List smooth terms estimate smoothing basis. See details examples smoothing terms. formula GAM formula. Can contain mulitple smooth terms estimate. See details information. df data frame contains GAM metrics. regressors Column name list column names use regressors. list can also include smoothing terms. Default: NULL. k_values list k values consider. Default: 1:50 bs name default smoothing basis. Default: \"tp\" kindex_thr k-index threshold. Default: 0.95 pvalue_thr p-value threshold. Default: 0.05 family Name family function distribution use modeling GAM dependent variable. name, possible values: (\"auto\", \"beta\", \"gamma\", \"gaussian\"). \"auto\", automatically determine distribution best fit mgcv::betar (\"beta\"), stats::Gamma (\"gamma\"), stats::gaussian (\"gaussian\"). function, see family family.mgcv family extended.family class functions. method GAM fitting method passed bam. Default: \"fREML\" discrete method \"fREML\" possible discretize covariates storage efficiency reasons. See bam information. Default: TRUE ... keyword arguments passed bam","code":""},{"path":"/reference/estimate_smooth_basis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate smoothing basis dimensions for GAM smoothers. — estimate_smooth_basis","text":"list containing two items:","code":""},{"path":[]},{"path":"/reference/estimate_smooth_basis.html","id":"smooth-terms-specification","dir":"Reference","previous_headings":"","what":"Smooth terms specification","title":"Estimate smoothing basis dimensions for GAM smoothers. — estimate_smooth_basis","text":"Smooth terms can specified : s(x)  smooth term estimated defaults k_values bs. s(x, k = 1:10, bs = 'cp')  smooth term estimated k values 1 10 basis set 'cp'. s(x, = group, k = c(2, 7))  smooth term estimate k value 2 7 using variable group. s(x, y, bs = 'fs', m = 3)  smooth term two variables, x y, estimated default k_values additional arguments basis set 'fs' m 3. shown mgcv smoothers, te, ti, t2, also available.","code":""},{"path":"/reference/estimate_smooth_basis.html","id":"estimation-process","dir":"Reference","previous_headings":"","what":"Estimation process","title":"Estimate smoothing basis dimensions for GAM smoothers. — estimate_smooth_basis","text":"smooth_term, function iteratively fit GAM model following formula incrementing k_values: target dependent variable, regressor_terms additive effects accounted estimating smoothing term, smooth_term smoothing term currently estimated.","code":""},{"path":"/reference/estimate_smooth_basis.html","id":"stopping-criterion","dir":"Reference","previous_headings":"","what":"Stopping criterion","title":"Estimate smoothing basis dimensions for GAM smoothers. — estimate_smooth_basis","text":"estimation process two stopping criterion: procedure stop k-index value exceeds kindex_thr p-value exceeds pvalue_thr. thresholds met, procedure stop runs k_values, returns last term.","code":""},{"path":[]},{"path":"/reference/estimate_smooth_basis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate smoothing basis dimensions for GAM smoothers. — estimate_smooth_basis","text":"","code":"if (FALSE) { # \\dontrun{ df_sarica <- read_afq_sarica(na_omit = TRUE)  # default specification method estimate_smooth_basis(   target       = \"fa\",    smooth_terms = c(\"s(nodeID)\", \"s(nodeID, by = group, bs = 'fs')\"),    df           = df_sarica,    regressors   = c(\"age\", \"group\"),  )  # formula specification method estimate_smooth_basis(   formula = fa ~ age + group + s(nodeID) + s(nodeID, by = \"group\", bs = \"fs\"),    df      = df_sarica,  )} # }"},{"path":"/reference/fit_gam.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a GAM model. — fit_gam","title":"Fit a GAM model. — fit_gam","text":"Function used fit GAM formula explicit formula builds formula given arguments.","code":""},{"path":"/reference/fit_gam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a GAM model. — fit_gam","text":"","code":"# Default S3 method fit_gam(   target,   df,   regressors = NULL,   node_col = \"nodeID\",   node_k = \"auto\",   node_group = NULL,   participant_col = \"subjectID\",   autocor = TRUE,   family = \"auto\",   method = \"fREML\",   discrete = TRUE,   ... )  # S3 method for class 'formula' fit_gam(   formula,   df,   node_col = \"nodeID\",   autocor = TRUE,   family = \"auto\",   method = \"fREML\",   discrete = TRUE,   ... )"},{"path":"/reference/fit_gam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a GAM model. — fit_gam","text":"target column name encodes metric model. formula Explicit formula use GAM model. df data frame contains GAM metrics. regressors Column name list column names use regressors. list can also include smoothing terms. Default: NULL. node_col column name encodes tract node positions. Default: \"nodeID\". node_k basis dimensions used represent node smoother. See details group well. Default: NULL node_group column name group tract node smooth (.e., s(node_col, = node_group, k = node_k)). participant_col column name encodes participant ID. Default: \"subjectID\". autocor Logical indicating AR1 autocorrelation corrected  GAM model. Default: TRUE family Name family function distribution use modeling GAM dependent variable. name, possible values: (\"auto\", \"beta\", \"gamma\", \"gaussian\"). \"auto\", automatically determine distribution best fit mgcv::betar (\"beta\"), stats::Gamma (\"gamma\"), stats::gaussian (\"gaussian\"). function, see family family.mgcv family extended.family class functions. method GAM fitting method passed bam. Default: \"fREML\" discrete method \"fREML\" possible discretize covariates storage efficiency reasons. See bam information. Default: TRUE ... keyword arguments passed estimate_smooth_basis bam","code":""},{"path":"/reference/fit_gam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a GAM model. — fit_gam","text":"Fit GAM model object.","code":""},{"path":[]},{"path":"/reference/fit_gam.html","id":"gam-model-formula","dir":"Reference","previous_headings":"","what":"GAM model formula","title":"Fit a GAM model. — fit_gam","text":"calling fit_gam default method, GAM model formula built build_formula. formula built following logic:   <variables> indicating optional components.","code":"target ~ <regressors>   + s(node_col, <by = node_group>, k = <node_k or estimated>)   + s(participant_col, bs = \"re\")"},{"path":"/reference/fit_gam.html","id":"automated-model-fitting-procedure","dir":"Reference","previous_headings":"","what":"Automated model fitting procedure","title":"Fit a GAM model. — fit_gam","text":"function series (optional) automatic steps GAM model fitting procedure: family == \"auto\", choose distribution (either \"beta\", \"gamma\", \"gaussian\") lowest AIC fitting GAM dependent variable data. Implemented estimate_distribution. node_k == \"auto\", estimates best k node smoother. implemented estimate_smooth_basis. autocor == TRUE, estimates best AR1 autocorrelation lag applies lag GAM model. Implemented itsadug::start_value_rho.","code":""},{"path":"/reference/fit_gam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a GAM model. — fit_gam","text":"","code":"if (FALSE) { # \\dontrun{ df_tract <- read_afq_sarica(na_omit = TRUE) %>%    filter(tractID == \"Right Corticospinal\")  # default method specification model_fit <- fit_gam(   target     = \"fa\",    df         = df_tract,   regressors = c(\"age\", \"group\"),    node_group = \"group\",    node_k     = \"auto\",   family     = \"auto\"  )  # formula method specification model_fit <- fit_gam(   formula = fa ~ age + group      + s(nodeID, by = \"group\", bs = \"fs\")      + s(subjectID, bs = \"re\"),    df = df_tract )} # }"},{"path":"/reference/plot_gam_splines.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot GAM splines for each group — plot_gam_splines","title":"Plot GAM splines for each group — plot_gam_splines","text":"Plot GAM splines group","code":""},{"path":"/reference/plot_gam_splines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot GAM splines for each group — plot_gam_splines","text":"","code":"plot_gam_splines(   gam_model,   tract,   df_tract,   dwi_metric,   covariates,   group_by = \"group\",   participant_id = \"subjectID\",   output_dir )"},{"path":"/reference/plot_gam_splines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot GAM splines for each group — plot_gam_splines","text":"gam_model GAM object, produced gam/bam tract AFQ tract name df_tract dataframe AFQ nodes certain tract dwi_metric Diffusion MRI metric (e.g. FA, MD) covariates List strings GAM covariates, including smoothing terms nodes random effect due subjectID. group_by grouping variable used group nodeID smoothing terms participant_id name column encodes participant ID output_dir directory save plots","code":""},{"path":"/reference/plot_gam_splines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot GAM splines for each group — plot_gam_splines","text":"","code":"if (FALSE) { # \\dontrun{ df_afq <- read.csv(\"/path/to/afq/output.csv\")  gam_fit <- fit_gam(   df_afq,   target = \"dti_fa\",   covariates = list(\"group\", \"sex\"),   family = \"gamma\",   k = 40 )  plot_gam_splines(   gam_model = gam_fit,   tract = \"OR\",   df_tract = df_afq,   dwi_metric = \"dti_fa\",   covariates = c(\"group\", \"sex\"),   output_dir = \".\")} # }"},{"path":"/reference/plot_tract_profiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot tract profiles — plot_tract_profiles","title":"Plot tract profiles — plot_tract_profiles","text":"Create tract profile figures tract facet y value figure.","code":""},{"path":"/reference/plot_tract_profiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot tract profiles — plot_tract_profiles","text":"","code":"plot_tract_profiles(   df,   y,   tracts = NULL,   tract_col = \"tractID\",   node_col = \"nodeID\",   group_col = NULL,   n_groups = NULL,   group_pal = \"cb\",   participant_col = \"subjectID\",   ribbon_func = \"mean_cl_boot\",   ribbon_alpha = 0.25,   linewidth = 1,   save_figure = TRUE,   output_dir = getwd(),   ... )"},{"path":"/reference/plot_tract_profiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot tract profiles — plot_tract_profiles","text":"df input dataframe. y Column name(s) variables plot y-axis. tracts Name(s) tract tracts plot per facet. Default: NULL  NULL, tracts data frame. tract_col column name encodes tract information. Default: tractID node_col column name encodes tract node positions. Default: \"nodeID\". group_col Column name encodes group information. drawn color. Default: NULL. group_col factor, use unique values groups. group_col numeric, use ggplot2::cut_interval create equal range n_groups groups. n_groups Number groups split numeric grouping variable. used group_col numeric. Default: NULL. group_pal Grouping color palette name. Valid options include: \"cb\" (colorblind), \"cbb\" (colorblind_black), named RColorBrewer palettes. Default: \"cb\" (colorblind) participant_col column name encodes participant ID. Default: \"subjectID\". ribbon_func Ribbon summarizing function provides y, ymin, ymax ribbon. See fun.data argument ggplot2::stat_summary information. Default: \"mean_cl_boot\" ribbon_alpha Ribbon alpha level. Default: 0.25 linewidth Line thickness tract profile line. Default: 1. save_figure Boolean flag. TRUE, save tract profiles. FALSE, save tract profiles. Default: FALSE output_dir Output directory figure image(s). Default: getwd (current working directory). ... Keyword arguments passed ggplot2::ggsave.","code":""},{"path":"/reference/plot_tract_profiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot tract profiles — plot_tract_profiles","text":"Named list plot handles corresponding specified y values.","code":""},{"path":"/reference/plot_tract_profiles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot tract profiles — plot_tract_profiles","text":"save_figure TRUE, naming convention follows: group_col, \"tract_by-(group_col)_param-(y)_profiles.png\". group_col == NULL, \"tract_param-(y)_profiles.png\"","code":""},{"path":"/reference/plot_tract_profiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot tract profiles — plot_tract_profiles","text":"","code":"if (FALSE) { # \\dontrun{ df_sarica <- read_afq_sarica(na_omit = TRUE)  plot_handle <- plot_tract_profiles(   df        = df,   y         = c(\"fa\", \"md\"),   tracts    = c(\"Left Corticospinal\", \"Right Corticospinal\"),   width     = 12,    height    = 6,   units     = \"in\" )  plot_handle <- plot_tract_profiles(   df        = df,   y         = c(\"fa\", \"md\"),   tracts    = c(\"Left Corticospinal\", \"Right Corticospinal\"),   group_col = \"group\",    width     = 12,    height    = 6,   units     = \"in\" )  plot_handle <- plot_tract_profiles(   df        = df,   y         = \"fa\",   tracts    = c(\"Left Corticospinal\", \"Right Corticospinal\"),   group_col = \"age\",    n_groups  = 5,    group_pal = \"Spectral\",    width     = 12,    height    = 6,   units     = \"in\" )} # }"},{"path":"/reference/read_afq_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a merged AFQ and phenotype dataframe — read_afq_files","title":"Create a merged AFQ and phenotype dataframe — read_afq_files","text":"Create merged AFQ phenotype dataframe","code":""},{"path":"/reference/read_afq_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a merged AFQ and phenotype dataframe — read_afq_files","text":"","code":"read_afq_files(   nodes_file,   pheno_file = NULL,   by = \"subjectID\",   tract_col = \"tractID\",   node_col = \"nodeID\",   other_cols = NULL,   na_omit = FALSE,   ... )"},{"path":"/reference/read_afq_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a merged AFQ and phenotype dataframe — read_afq_files","text":"nodes_file Path nodes file. pheno_file Path phenotypic file. pheno_file = NULL returns \"unsupervised\" AFQ dataset (phenotypic data). Column used merging nodes phenotypic files. Default: \"subjectID\"  variable names differ nodes phenotypic datasets, use named character vector like = c(\"x_a\" = \"y_a\", \"x_b\" = \"y_b\"). tract_col column name encodes tract names. Default: \"tractID\" node_col column name encodes tract node positions. Default: \"nodeID\" other_cols column names included final data frame. Default: NULL na_omit logical indicating whether rows NA values removed data frame returning. Default: FALSE ... keyword arguments passed file reading function: readr::read_csv readr::read_tsv.","code":""},{"path":"/reference/read_afq_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a merged AFQ and phenotype dataframe — read_afq_files","text":"AFQ dataset.","code":""},{"path":"/reference/read_afq_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a merged AFQ and phenotype dataframe — read_afq_files","text":"","code":"if (FALSE) { # \\dontrun{ df_afq <- read_afq_files(   nodes_file = \"path/to/nodes.csv\",   pheno_file = \"path/to/pheno.csv\" ) } # }"},{"path":"/reference/read_afq_hbn.html","id":null,"dir":"Reference","previous_headings":"","what":"Load tract profiles from the Healthy Brain Network dataset — read_afq_hbn","title":"Load tract profiles from the Healthy Brain Network dataset — read_afq_hbn","text":"Load tract profiles Healthy Brain Network dataset","code":""},{"path":"/reference/read_afq_hbn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load tract profiles from the Healthy Brain Network dataset — read_afq_hbn","text":"","code":"read_afq_hbn(truncate = FALSE, na_omit = FALSE, ...)"},{"path":"/reference/read_afq_hbn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load tract profiles from the Healthy Brain Network dataset — read_afq_hbn","text":"truncate Truncate dataset 49 rows, logical. Default: FALSE. na_omit logical indicating whether rows NA values removed data frame returning. Default: FALSE ... keyword arguments passed file reading function: readr::read_csv readr::read_tsv.","code":""},{"path":"/reference/read_afq_hbn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load tract profiles from the Healthy Brain Network dataset — read_afq_hbn","text":"merged dataframe data HBN","code":""},{"path":"/reference/read_afq_hbn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load tract profiles from the Healthy Brain Network dataset — read_afq_hbn","text":"","code":"if (FALSE) { # \\dontrun{  df_hbn <- read_afq_hbn()} # }"},{"path":"/reference/read_afq_sarica.html","id":null,"dir":"Reference","previous_headings":"","what":"Load tract profiles from Sarica et al. — read_afq_sarica","title":"Load tract profiles from Sarica et al. — read_afq_sarica","text":"Load tract profiles Sarica et al.","code":""},{"path":"/reference/read_afq_sarica.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load tract profiles from Sarica et al. — read_afq_sarica","text":"","code":"read_afq_sarica(na_omit = FALSE, ...)"},{"path":"/reference/read_afq_sarica.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load tract profiles from Sarica et al. — read_afq_sarica","text":"na_omit logical indicating whether rows NA values removed data frame returning. Default: FALSE ... keyword arguments passed file reading function: readr::read_csv readr::read_tsv.","code":""},{"path":"/reference/read_afq_sarica.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load tract profiles from Sarica et al. — read_afq_sarica","text":"merged dataframe data Sarica et al.","code":""},{"path":"/reference/read_afq_sarica.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load tract profiles from Sarica et al. — read_afq_sarica","text":"","code":"df_sarica <- read_afq_sarica()"},{"path":"/reference/read_afq_weston_havens.html","id":null,"dir":"Reference","previous_headings":"","what":"Load tract profiles from Yeatman et al. — read_afq_weston_havens","title":"Load tract profiles from Yeatman et al. — read_afq_weston_havens","text":"Load tract profiles Yeatman et al.","code":""},{"path":"/reference/read_afq_weston_havens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load tract profiles from Yeatman et al. — read_afq_weston_havens","text":"","code":"read_afq_weston_havens(na_omit = FALSE, ...)"},{"path":"/reference/read_afq_weston_havens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load tract profiles from Yeatman et al. — read_afq_weston_havens","text":"na_omit logical indicating whether rows NA values removed data frame returning. Default: FALSE ... keyword arguments passed file reading function: readr::read_csv readr::read_tsv.","code":""},{"path":"/reference/read_afq_weston_havens.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load tract profiles from Yeatman et al. — read_afq_weston_havens","text":"merged dataframe data Yeatman et al.","code":""},{"path":"/reference/read_afq_weston_havens.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load tract profiles from Yeatman et al. — read_afq_weston_havens","text":"","code":"df_weston_havens <- read_afq_weston_havens()"},{"path":"/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. magrittr %>%","code":""},{"path":"/reference/save_gam.html","id":null,"dir":"Reference","previous_headings":"","what":"Save GAM model outputs. — save_gam","title":"Save GAM model outputs. — save_gam","text":"function saves GAM model RData (.rda) file. Optionally, save model summary text (.txt) file, mgcv::gam.check figures PNG (.png), mgcv::k.check output text (.txt) file.","code":""},{"path":"/reference/save_gam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save GAM model outputs. — save_gam","text":"","code":"save_gam(gam_model, output_file, model_summary = TRUE, model_check = FALSE)"},{"path":"/reference/save_gam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save GAM model outputs. — save_gam","text":"gam_model GAM model object saved RData file. output_file RData output file name. Accepted file extensions: .RData, .Rdata, .rdata, .rda. model_summary logical indicating whether model summary output saved text file. Default: TRUE model_check logical indicating whether model check reports saved. Default: FALSE","code":""},{"path":"/reference/save_gam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save GAM model outputs. — save_gam","text":"model_summary TRUE, output summary(gam_model) captured saved text file following naming convention \"<output_file>_Summary.txt\". model_check TRUE, outputs mgcv::gam.check captured saved. mgcv::gam.check consists two components: GAM model diagnostic plots, implemented gratia::appraise. output saved following naming convention: \"<output_file>_GamCheck.png\" Smoothing basis dimension checks, implemented mgcv::k.check. output saved following naming convention: \"<output_file>_GamCheck.txt\"","code":""},{"path":"/reference/save_gam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save GAM model outputs. — save_gam","text":"","code":"if (FALSE) { # \\dontrun{ save_gam(   gam_model   = model_fit,    output_file = \"output.rda\" )} # }"},{"path":"/reference/shuffle_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Shuffle an AFQ dataframe — shuffle_df","title":"Shuffle an AFQ dataframe — shuffle_df","text":"function shuffles participants' demographic information (.e., age, group, sex), thereby destroying correlations participants' tract profiles phenotypic data.","code":""},{"path":"/reference/shuffle_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shuffle an AFQ dataframe — shuffle_df","text":"","code":"shuffle_df(   df,   target,   shuffle_cols = NULL,   node_col = \"nodeID\",   node_group = NULL,   tract_col = \"tractID\",   participant_col = \"subjectID\",   sample_uniform = FALSE )"},{"path":"/reference/shuffle_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shuffle an AFQ dataframe — shuffle_df","text":"df input dataframe. target column name encodes metric model. shuffle_cols Column names shuffled. node_col column name encodes tract node positions. Default: \"nodeID\" node_group column name group tract node smooth . Default: NULL. tract_col column name encodes tract names. Default: \"tractID\" participant_col column name encodes participant ID. Default: \"subjectID\". sample_uniform Boolean flag. TRUE, shuffling sample uniformly unique values columns. FALSE, shuffling shuffle without replacement.","code":""},{"path":"/reference/shuffle_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shuffle an AFQ dataframe — shuffle_df","text":"shuffled AFQ dataframe","code":""},{"path":"/reference/shuffle_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shuffle an AFQ dataframe — shuffle_df","text":"","code":"if (FALSE) { # \\dontrun{ df_afq <- read_csv(\"/path/to/afq/output.csv\") df_shuffled <- shuffle_df(df_afq, target = \"dti_fa\")} # }"},{"path":"/reference/spline_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and plot difference between two splines — spline_diff","title":"Calculate and plot difference between two splines — spline_diff","text":"function draws spline-difference plot 2 splines, returns dataframe differences node","code":""},{"path":"/reference/spline_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and plot difference between two splines — spline_diff","text":"","code":"spline_diff(   gam_model,   tract,   group_by = \"group\",   factor_a,   factor_b,   save_output = TRUE,   sim.ci = FALSE,   output_dir = getwd() )"},{"path":"/reference/spline_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and plot difference between two splines — spline_diff","text":"gam_model GAM object, produced gam/bam tract AFQ tract name group_by grouping variable used group nodeID smoothing terms factor_a First group factor, string factor_b Second group factor, string save_output Boolean. TRUE, save plot output sim.ci Logical: Using simultaneous confidence intervals (default set FALSE). implementation simultaneous CIs follows Gavin Simpson's blog December 15, 2016: http://www.fromthebottomoftheheap.net/2016/12/15/simultaneous-interval-revisited/. interval calculated simulations based. Please specify seed (e.g., set.seed(123)) reproducible results. Note: contrast Gavin Simpson's code, Bayesian posterior covariance matrix parameters uncertainty corrected (unconditional=TRUE) reflect uncertainty estimation smoothness parameters. output_dir Directory save plots","code":""},{"path":"/reference/spline_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and plot difference between two splines — spline_diff","text":"dataframe spline differences node","code":""},{"path":"/reference/spline_diff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate and plot difference between two splines — spline_diff","text":"","code":"if (FALSE) { # \\dontrun{ df_afq <- read.csv(\"/path/to/afq/output.csv\")  gam_fit <- fit_gam(   df_afq,   target = \"dti_fa\",   covariates = list(\"group\", \"sex\"),   family = \"gamma\",   k = 40 )  df_diff <- spline_diff(   gam_model = gam_fit,   tract = \"OR\",   factor_b = \"1\",   output_dir = \".\" )} # }"},{"path":"/reference/tract_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve tract name from abbreviation — tract_name","title":"Retrieve tract name from abbreviation — tract_name","text":"Retrieve tract name abbreviation","code":""},{"path":"/reference/tract_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve tract name from abbreviation — tract_name","text":"","code":"tract_name(tract_abbr)"},{"path":"/reference/tract_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve tract name from abbreviation — tract_name","text":"tract_abbr AFQ tract abbreviation","code":""},{"path":"/reference/tract_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve tract name from abbreviation — tract_name","text":"Formatted tract name","code":""},{"path":"/reference/tract_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve tract name from abbreviation — tract_name","text":"","code":"full_name <- tract_name(\"OR\") full_name <- tract_name(\"CST_L\")"},{"path":"/reference/tractable-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tractable: Analyzing diffusion MRI tract profiles — tractable-package","title":"tractable: Analyzing diffusion MRI tract profiles — tractable-package","text":"toolbox analyzing diffusion MRI tract profiles.","code":""},{"path":[]},{"path":"/reference/tractable-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tractable: Analyzing diffusion MRI tract profiles — tractable-package","text":"Maintainer: Kelly Chang kchang4@uw.edu (ORCID) Authors: Adam Richie-Halford richiehalford@gmail.com (ORCID) Teresa Gomez tmgomez@uw.edu McKenzie Hagen mphagen@uw.edu (ORCID) Ethan Roy ethanroy395@gmail.com (ORCID) Ariel Rokem arokem@gmail.com (ORCID)","code":""},{"path":"/reference/tractable_single_tract.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze group differences in a single dMRI tract profile using GAMs — tractable_single_tract","title":"Analyze group differences in a single dMRI tract profile using GAMs — tractable_single_tract","text":"Analyze group differences single dMRI tract profile using GAMs","code":""},{"path":"/reference/tractable_single_tract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze group differences in a single dMRI tract profile using GAMs — tractable_single_tract","text":"","code":"tractable_single_tract(df, tract, tract_col = \"tractID\", ...)"},{"path":"/reference/tractable_single_tract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze group differences in a single dMRI tract profile using GAMs — tractable_single_tract","text":"df Input data frame. tract Tract name subset dataframe. tract_col column name encodes tract information. Default: tractID ... Arguments passed fit_gam","code":""},{"path":"/reference/tractable_single_tract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyze group differences in a single dMRI tract profile using GAMs — tractable_single_tract","text":"GAM model fit object.","code":""},{"path":"/reference/tractable_single_tract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyze group differences in a single dMRI tract profile using GAMs — tractable_single_tract","text":"","code":"df_sarica <- read_afq_sarica(na_omit = TRUE)  tractable_single_tract(   df         = df_sarica,    tract      = \"Right Corticospinal\",   target     = \"fa\",   regressors = c(\"age\", \"group\"),   node_group = \"group\" ) #>  #> Family: gaussian  #> Link function: identity  #>  #> Formula: #> fa ~ age + group + s(nodeID, by = group, bs = \"fs\", k = 9) +  #>     s(subjectID, bs = \"re\") #>  #> Estimated degrees of freedom: #>  7.97  7.96 42.42  total = 61.35  #>  #> fREML score: -13622.6"}]
